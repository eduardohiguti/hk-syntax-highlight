{
	"scopeName": "source.hunick",
	"name": "Hunick",
	"patterns": [
	  { "include": "#comments" },
	  { "include": "#strings" },
	  { "include": "#keywords" },
	  { "include": "#entities" },
	  { "include": "#constants" },
	  { "include": "#variables" },
	  { "include": "#operators" }
	],
	"repository": {
	  "comments": {
		"patterns": [
		  {
			"name": "comment.line.double-slash",
			"match": "//.*"
		  },
		  {
			"name": "comment.block",
			"begin": "/\\*",
			"end": "\\*/"
		  }
		]
	  },
	  "strings": {
		"patterns": [
		  {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			  {
				"name": "constant.character.escape",
				"match": "\\\\."
			  }
			]
		  }
		]
	  },
	  "keywords": {
		"patterns": [
		  {
			"name": "keyword.control.flow",
			"match": "\\b(if|else|match|return|for|while|break|continue)\\b"
		  },
		  {
			"name": "keyword.declaration",
			"match": "\\b(let|const|func|type)\\b"
		  },
		  {
			"name": "storage.type.numeric.hunick",
			"match": "\\b(int|float)\\b"
		  },
		  {
			"name": "storage.type.string.hunick",
			"match": "\\b(string)\\b"
		  },
		  {
			"name": "storage.type.boolean.hunick",
			"match": "\\b(bool)\\b"
		  },
		  {
			"name": "storage.modifier",
			"match": "\\b(mut)\\b"
		  }
		]
	  },
	  "operators": {
		"patterns": [
		  {
			"name": "keyword.operator.arrow",
			"match": "->"
		  },
		  {
			"name": "keyword.operator.pipe",
			"match": "\\|>"
		  },
		  {
			"name": "keyword.operator.borrow",
			"match": "&(mut)?"
		  },
		  {
			"name": "keyword.operator.comparison",
			"match": "==|!=|<=|>=|<|>"
		  },
		  {
			"name": "keyword.operator.logical",
			"match": "&&|\\|\\||!"
		  },
		  {
			"name": "keyword.operator.assignment",
			"match": "="
		  },
		  {
			"name": "keyword.operator.arithmetic",
			"match": "[+\\-*/%]"
		  }
		]
	  },
	  "entities": {
		"patterns": [
		  {
			"name": "entity.name.function",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()"
		  },
		  {
			"name": "entity.name.type",
			"match": "(?<=:\\s*)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
		  }
		]
	  },
	  "constants": {
		"patterns": [
		  {
			"name": "constant.numeric",
			"match": "\\b[0-9]+(\\.[0-9]+)?\\b"
		  },
		  {
			"name": "constant.language",
			"match": "\\b(true|false|null)\\b"
		  }
		]
	  },
	  "variables": {
		"patterns": [
		  {
			"name": "variable.parameter",
			"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*:)"
		  }
		]
	  }
	}
  }